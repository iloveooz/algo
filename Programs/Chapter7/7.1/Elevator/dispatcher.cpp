/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 7. Обмен сообщениями и обработка сообщений        *
*          7.1. Схема обмена сообщениями                       *
*                                                              *
*  Автор    : А.Кубенский                                      *
*  Файл     : dispatcher.h                                     *
*  Описание : Описание класса, определяющего диспетчер         *
*             сообщений                                        *
***************************************************************/

#include "dispatcher.h"
#include "iterator.h"

//======================================================
//  Удаление заданного обработчика сообщений из списка:
//======================================================
  
Handler * Dispatcher::removeHandler(Handler * hnd) {
  // Результат работы равен hnd, если обработчик
  // сообщений найден в списке, и NULL, если его там нет
  Handler * result = NULL;

  // Итератор списка обработчиков сообщений:
  Iterator<Handler *> *it = handlers.iterator();

  // Цикл поиска и удаления заданного обработчика сообщений
  while (it->hasMoreElements()) {
    if (**it == hnd) {
      // Обработчик сообщений найден; он удаляется из списка
      it->remove();
      result = hnd;
      break;
    } else {
      ++*it;
    }
  }
  delete it;
  return result;
}
  
//======================================================
//  Удаление заданного генератора сообщений из списка:
//======================================================
  
Generator * Dispatcher::removeGenerator(Generator * gen) {
  // Результат работы равен gen, если генератор
  // сообщений найден в списке, и NULL, если его там нет
  Generator * result = NULL;

  // Итератор списка генераторов сообщений:
  Iterator<Generator *> *it = generators.iterator();

  // Цикл поиска и удаления заданного генератора сообщений
  while (it->hasMoreElements()) {
    if (**it == gen) {
      // Генератор сообщений найден; он удаляется из списка
      it->remove();
      result = gen;
      break;
    } else {
      ++*it;
    }
  }
  delete it;
  return result;
}

//======================================================
//  Основной цикл работы диспетчера сообщений
//======================================================

void Dispatcher::run() {
  // Цикл может закончиться только по обработке системной команды
  for (;;) {
    //----- 1. Попытаемся найти какое-либо сообщение
    Message * msg = NULL;
    if (!messages.isEmpty()) {
      // Очередь сообщений не пуста – берем сообщение из нее
      msg = messages.head();
      messages.remove();
    } else {
      // Очередь сообщений пуста, запрашиваем генераторы
      Iterator<Generator *> * it = generators.iterator();
      while (it->hasMoreElements()) {
        Generator * generator = **it;
        if (msg = generator->generate()) {
          break;
        }
        ++*it;
      }
    }
    
    if (msg) {
      //----- 2. Проверка сообщения
      if (msg->getMsgClass() == msgQuit) {
        // Заканчивается работа диспетчера,
        // а вместе с ним и всей программы
        break;
      }
    
      //----- 3. Передача сообщения на обработку
      Iterator<Handler *> * it = handlers.iterator();
      while (it->hasMoreElements()) {
        Handler * handler = **it;
        if (handler->handle(*msg)) {
          break;
        }
        ++*it;
      }
    }
  }
}
