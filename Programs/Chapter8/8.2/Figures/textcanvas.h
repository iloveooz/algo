/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 8. Функции как носитель информации                *
*          8.2. Задача о расстановке ферзей на шахматной доске *
*               и другие задачи                                *
*                                                              *
*  Автор    : А.Кубенский                                      *
*  Файл     : textcanvas.h                                     *
*  Описание : Определение простого холста для рисования        *
*             звездочками в текстовом режиме                   *
***************************************************************/

#ifndef __TEXTCANVAS_H
#define __TEXTCANVAS_H

#include "figure.h"
#include <iostream>

using namespace std;

//-------------------------------------------------------------
// Класс TextCanvas реализует холст в виде квадратной матрицы
// символов. Закрашенной точке соответствует символ '*',
// пустой точке - пробел
//-------------------------------------------------------------
class TextCanvas : public Canvas {
  bool ** field;  // Матрица точек
  int x, y;       // Размеры холста

public :
  // Конструктор (по умолчанию создает холст
  // размером со стандартный текстовый экран)
  TextCanvas(int x = 80, int y = 25) : x(x), y(y) {
    // Заказ памяти и "грунтовка" холста пробелами
    field = new (bool*)[y];
    for (int j = 0; j < y; j++) {
      field[j] = new bool[x];
      for (int i = 0; i < x; i++) {
        field[j][i] = false;
      }
    }
  }

  // Реализация функций доступа к размерам холста
  int getSizeX() const { return x; }
  int getSizeY() const { return y; }

  // Закрашивание точки: значение true заносится в матрицу
  void putPoint(int x, int y) {
    if (x >= 0 && x < TextCanvas::x && y >= 0 && y < TextCanvas::y)
      field[y][x] = true;
  }

  // Стирание точки: значение false заносится в матрицу
  void clearPoint(int x, int y) {
    if (x >= 0 && x < TextCanvas::x && y >= 0 && y < TextCanvas::y)
      field[y][x] = false;
  }

  // Вывод изображения на холсте в стандартный выходной поток
  void print() {
    // Построчный вывод матрицы
    for (int j = 0; j < y; j++) {
      for (int i = 0; i < x; i++) {
        cout << (field[j][i] ? '*' : ' ');
      }
      cout << endl;
    }
  }
};

#endif
