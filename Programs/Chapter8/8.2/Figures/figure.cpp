/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 8. Функции как носитель информации                *
*          8.2. Задача о расстановке ферзей на шахматной доске *
*               и другие задачи                                *
*                                                              *
*  Автор    : А.Кубенский                                      *
*  Файл     : figure.cpp                                       *
*  Описание : Определение базовых операций с холстом и         *
*             фигурами                                         *
***************************************************************/

#include "figure.h"
#include <stdlib.h>

//--------------------------------------------------------------
// Реализация алгоритма Брезенхема рисования прямой линии
//--------------------------------------------------------------
void Canvas::line(const Point & ptFrom, const Point & ptTo) {
  int x = ptFrom.getX(),
      y = ptFrom.getY();
  int dx = abs(ptTo.getX() - x),
      dy = abs(ptTo.getY() - y);
  int sx = ((ptTo.getX() - x) > 0) ? 1 : -1,
      sy = ((ptTo.getY() - y) > 0) ? 1 : -1;
  bool steep = dy > dx;

  if (steep) {
    int e = dx * 2 - dy;
    int d1 = dx * 2;
    int d2 = (dx - dy) * 2;
    putPoint(x, y);

    for (int i = 1; i <= dy; i++) {
      y += sy;
      if (e > 0) {
        e += d2;
        x += sx;
      } else {
        e += d1;
      }
      putPoint(x, y);
    }
  } else {
    int e = dy * 2 - dx;
    int d1 = dy * 2;
    int d2 = (dy - dx) * 2;
    putPoint(x, y);
    
    for (int i = 1; i <= dx; i++) {
      x += sx;
      if (e > 0) {
        e += d2;
        y += sy;
      } else {
        e += d1;
      }
      putPoint(x, y);
    }
  }
}

//--------------------------------------------------------------
// Операция сдвига опорной точки фигуры по оси X
//--------------------------------------------------------------
FigurePtr shiftX(const FigurePtr & fig, int x) {
  return FigurePtr(new ShiftXFigure(fig, x));
}

//--------------------------------------------------------------
// Операция сдвига опорной точки фигуры по оси Y
//--------------------------------------------------------------
FigurePtr shiftY(const FigurePtr & fig, int y) {
  return FigurePtr(new ShiftYFigure(fig, y));
}

//--------------------------------------------------------------
// Операция объединения фигур
//--------------------------------------------------------------
FigurePtr join(const FigurePtr & fig1, const FigurePtr & fig2) {
  return FigurePtr(new JointFigure(fig1, fig2));
}
