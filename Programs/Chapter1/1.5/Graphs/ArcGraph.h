/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 1. Способы представления структур данных          *
*          1.5. Графы                                          *
*                                                              *
*  Автор    : А.Кубенский                                      *
*  Файл     : ArcGraph.h                                       *
*  Описание : Определение класса ArcGraph с реализацией графа  *
*             в виде массива дуг                               *
***************************************************************/

#ifndef __ARC_GRAPH_H
#define __ARC_GRAPH_H

#include "Graph.h"       // Базовый класс
#include <stdlib.h>

class MatrixGraph;

//**************************************************************
// Определение класса для представления A-графа
//**************************************************************

class ArcGraph : public Graph {
  // Функция преобразования в М-граф нуждается в деталях
  // представления А-графа
  friend MatrixGraph * convert(const ArcGraph & srcGraph);

  // Элементы списка дуг
  struct Arc { 
    int begin, end;
    Arc *next;

    // Конструктор элемента списка
    Arc(int b, int e, Arc *n = NULL) { 
      begin = b; end = e;
      next = n;
    }
  };

  // Реализация списка: указатели на первый и последний элементы списка
  Arc *first, *last;

  // Количество элементов списка - дуг графа
  int arcCount;

  // Количество вершин графа
  int vertexNumber;

public:

  // Конструктор графа создает новый пустой список дуг
  ArcGraph(int n) : first(NULL), last(NULL), arcCount(0), vertexNumber(n) {}

  // Деструктор уничтожает созданный список дуг
  virtual ~ArcGraph();

  // Функция подсчета числа вершин просто выдает
  // ранее сохраненное значение
  int vertexCount() const { return vertexNumber; }

  // Основные методы работы с графом
  void addArc(int from, int to);
  bool hasArc(int from, int to) const;
};

#endif
