/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 6. Алгоритмы обработки сетевой информации         *
*          6.1. Обходы и поиск в графах                        *
*                                                              *
*  Автор    : А. Кубенский                                     *
*  Файл     : topsort.h                                        *
*  Описание : Определение классов для топологической           *
*             сортировки вершин графа                          *
***************************************************************/

#ifndef __TOPSORT_H
#define __TOPSORT_H

#include "ListGraph.h"

//=============================================================
// Классы Marker и TopSortActor используются для топологической
// сортировки вершин графа, при этом класс Marker определяет 
// объект для хранения пометок вершин графа, а класс TopSortActor
// определяет поведение посетителя вершин графа при выполении
// топологической сортировки.
//=============================================================

class Marker {
  int nVertex;      // Общее количство вершин графа
  int * marks;      // Массив меток вершин
  bool error;       // error = true, когда обнаруживается цикл

  class TopSortActor : public GraphActor {
    Marker * marker;    // объект для хранения меток вершин
    int nextMark;       // номер очередной метки при обходе

  public :

    // Конструктор получает в качестве параметра указатель на
    // объект, в котором будут храниться метки вершин
    TopSortActor(Marker * marker);

    // Переопределяются две операции: пометка вершины происходит
    // при окончательном уходе из вершины в процессе обхода;
    // при прохождении дуги происходит проверка, не замыкает ли 
    // эта дуга некоторый цикл
    void vertexOut(int vertex);
    void arcForward(int begin, int end, bool newVertex);
  };

public :

  // Конструктор получает ссылку на граф, помечает его вершины
  // меткой -1, а затем обходит вершины графа с помощью
  // специально спроектированного посетителя вершин
  Marker(ListGraph & graph) 
    : nVertex(graph.vertexCount()), marks(new int[nVertex]), error(false) {
        // 1. Пометка вершин значением -1
        for (int i = 0; i < nVertex; i++) marks[i] = -1;

        // 2. Обход в глубину с топологической сортировкой вершин
        TopSortActor actor(this);
        graph.traverseDepth(actor);
  }

  // Деструктор уничитожает массив меток вершин
  ~Marker() { delete marks; }

  // Число вершин в массиве
  int vertexCount() const { return nVertex; }

  // Функция для проверки, помечена ли вершина
  bool isMarked(int vertex) const { return marks[vertex] != -1; }

  // Функция выдачи метки вершины
  int getMark(int vertex) const { return marks[vertex]; }

  // Функции доступа к флагу ошибки
  bool hasError() const { return error; }
};

#endif
