/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 2. Базовые алгоритмы                              *
*          2.2. Стеки и очереди                                *
*                                                              *
*  Автор    : А.Кубенский                                      *
*  Файл     : bitstack.h                                       *
*  Описание : Битовый стек, реализованный в виде слова из      *
*             битовых элементов                                *
***************************************************************/

#ifndef __BITSTACK_H
#define __BITSTACK_H

#include "stack.h"

/*******************************************************
 * Реализация ограниченного стека из битовых элементов
 * Стек может содержать до 31 бита
 *******************************************************/
class BitStack : public Stack<int> {
  unsigned long stack;   // содержимое стека. Вершина - младший бит слова

public :

  // Конструктор: единица в младшем бите маркирует дно стека
  BitStack() : stack(1) {}

  // Конструктор копирования: копируется слово 'stack'
  BitStack(const BitStack & src) : stack(src.stack) {}

  // Операция вталкивания элемента в стек
  void push(const int & e) {
    // Проверка переполнения: старшая единица в слове
    // служит маркером дна стека
    if (stack & 0x80000000) throw StackOverflow();
    stack <<= 1;      // содержимое сдвигается влево на один бит
    stack |= (e & 1); // новый элемент записывается в младший бит
  }

  // Операция выталкивания элемента из стека
  void pop() {
    // стек пуст, если в нем содержится только маркер дна стека
    if (stack == 1) throw StackUnderflow();
    stack >>= 1;        // Содержимое слова сдвигается вправо
  }

  // Операция выдачи содержимого вершины стека
  int & top() {
    if (stack == 1) throw StackUnderflow();
    int temp = stack & 1;
    return temp;
  }

  // Операция выдачи содержимого вершины стека
  const int & top() const {
    if (stack == 1) throw StackUnderflow();
    int temp = stack & 1;
    return temp;
  }

  // Операция проверки пустоты стека
  bool empty() {
    return stack == 1;
  }
};

#endif
