/***************************************************************
*  Структуры и алгоритмы обработки данных:                     *
*  объектно-ориентированный подход и реализация на C++         *
*      Глава 2. Базовые алгоритмы                              *
*          2.2. Сортировка и поиск в массивах                  *
*                                                              *
*  Автор    : А.Кубенский                                      *
*  Файл     : quicksort.h                                      *
*  Описание : Функции сортировки элементов массива методом     *
*             "быстрой" сортировки                             *
***************************************************************/

#ifndef __QUICK_SORT_H
#define __QUICK_SORT_H

#include "insertsort.h"

//-------------------------------------------------------------
// Шаблон quickSort задает рекурсивную функцию сортировки
// элементов массива методом "быстрой" сортировки.
//   - Key - класс, задающий тип элементов массива;
//   - array - упорядочиваемый массив;
//   - low, high - индексы, задающие диапазон сортировки;
//-------------------------------------------------------------

template <class Key>
void quickSort(Key * array, int low, int high) {
  // Предполагается, что в начале работы low <= high
  // В результате сортировки получается упорядоченный фрагмент
  // массива в диапазоне от low до high

  int pLow = low,
      pHigh = high;        // указатели концов фрагмента массива
  Key elem = array[low];   // выбранный "произвольный" элемент
  while (pLow != pHigh) {
    // 1. Просмотр элементов массива "снизу"
    while (pHigh > pLow && array[pHigh] >= elem) pHigh--;
    if (pHigh > pLow) {
      array[pLow] = array[pHigh];   // "Обмен местами" элементов
      // 2. Просмотр элементов массива "сверху"
      while (pLow < pHigh && array[pLow] <= elem) pLow++;
      array[pHigh] = array[pLow];   // Еще один "обмен"
    }
  }

  // Теперь указатели pLow и pHigh "столкнулись", массив разделен.
  array[pLow] = elem;
  if (pLow - low > 1) {
    if (pLow - low > 10)
      quickSort<Key>(array, low, pLow-1);
    else
      insertSort<Key>(array, low, pLow-1);
  }
  if (high - pHigh > 1) {
    if (high - pHigh > 10)
      quickSort<Key>(array, pHigh+1, high);
    else
      insertSort<Key>(array, pHigh+1, high);
  }
}

#endif
